// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/29/2022 14:14:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    conv_7seg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module conv_7seg_vlg_sample_tst(
	a,
	b,
	c,
	d,
	sampler_tx
);
input  a;
input  b;
input  c;
input  d;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module conv_7seg_vlg_check_tst (
	sa,
	sb,
	sc,
	sd,
	se,
	sf,
	sg,
	sampler_rx
);
input  sa;
input  sb;
input  sc;
input  sd;
input  se;
input  sf;
input  sg;
input sampler_rx;

reg  sa_expected;
reg  sb_expected;
reg  sc_expected;
reg  sd_expected;
reg  se_expected;
reg  sf_expected;
reg  sg_expected;

reg  sa_prev;
reg  sb_prev;
reg  sc_prev;
reg  sd_prev;
reg  se_prev;
reg  sf_prev;
reg  sg_prev;

reg  sa_expected_prev;
reg  sb_expected_prev;
reg  sc_expected_prev;
reg  sd_expected_prev;
reg  se_expected_prev;
reg  sf_expected_prev;
reg  sg_expected_prev;

reg  last_sa_exp;
reg  last_sb_exp;
reg  last_sc_exp;
reg  last_sd_exp;
reg  last_se_exp;
reg  last_sf_exp;
reg  last_sg_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	sa_prev = sa;
	sb_prev = sb;
	sc_prev = sc;
	sd_prev = sd;
	se_prev = se;
	sf_prev = sf;
	sg_prev = sg;
end

// update expected /o prevs

always @(trigger)
begin
	sa_expected_prev = sa_expected;
	sb_expected_prev = sb_expected;
	sc_expected_prev = sc_expected;
	sd_expected_prev = sd_expected;
	se_expected_prev = se_expected;
	sf_expected_prev = sf_expected;
	sg_expected_prev = sg_expected;
end



// expected sg
initial
begin
	sg_expected = 1'bX;
end 

// expected sf
initial
begin
	sf_expected = 1'bX;
end 

// expected se
initial
begin
	se_expected = 1'bX;
end 

// expected sd
initial
begin
	sd_expected = 1'bX;
end 

// expected sc
initial
begin
	sc_expected = 1'bX;
end 

// expected sb
initial
begin
	sb_expected = 1'bX;
end 

// expected sa
initial
begin
	sa_expected = 1'bX;
end 
// generate trigger
always @(sa_expected or sa or sb_expected or sb or sc_expected or sc or sd_expected or sd or se_expected or se or sf_expected or sf or sg_expected or sg)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sa = %b | expected sb = %b | expected sc = %b | expected sd = %b | expected se = %b | expected sf = %b | expected sg = %b | ",sa_expected_prev,sb_expected_prev,sc_expected_prev,sd_expected_prev,se_expected_prev,sf_expected_prev,sg_expected_prev);
	$display("| real sa = %b | real sb = %b | real sc = %b | real sd = %b | real se = %b | real sf = %b | real sg = %b | ",sa_prev,sb_prev,sc_prev,sd_prev,se_prev,sf_prev,sg_prev);
`endif
	if (
		( sa_expected_prev !== 1'bx ) && ( sa_prev !== sa_expected_prev )
		&& ((sa_expected_prev !== last_sa_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sa_expected_prev);
		$display ("     Real value = %b", sa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sa_exp = sa_expected_prev;
	end
	if (
		( sb_expected_prev !== 1'bx ) && ( sb_prev !== sb_expected_prev )
		&& ((sb_expected_prev !== last_sb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sb_expected_prev);
		$display ("     Real value = %b", sb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sb_exp = sb_expected_prev;
	end
	if (
		( sc_expected_prev !== 1'bx ) && ( sc_prev !== sc_expected_prev )
		&& ((sc_expected_prev !== last_sc_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sc_expected_prev);
		$display ("     Real value = %b", sc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sc_exp = sc_expected_prev;
	end
	if (
		( sd_expected_prev !== 1'bx ) && ( sd_prev !== sd_expected_prev )
		&& ((sd_expected_prev !== last_sd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sd_expected_prev);
		$display ("     Real value = %b", sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sd_exp = sd_expected_prev;
	end
	if (
		( se_expected_prev !== 1'bx ) && ( se_prev !== se_expected_prev )
		&& ((se_expected_prev !== last_se_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port se :: @time = %t",  $realtime);
		$display ("     Expected value = %b", se_expected_prev);
		$display ("     Real value = %b", se_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_se_exp = se_expected_prev;
	end
	if (
		( sf_expected_prev !== 1'bx ) && ( sf_prev !== sf_expected_prev )
		&& ((sf_expected_prev !== last_sf_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sf :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sf_expected_prev);
		$display ("     Real value = %b", sf_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sf_exp = sf_expected_prev;
	end
	if (
		( sg_expected_prev !== 1'bx ) && ( sg_prev !== sg_expected_prev )
		&& ((sg_expected_prev !== last_sg_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sg_expected_prev);
		$display ("     Real value = %b", sg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sg_exp = sg_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module conv_7seg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
// wires                                               
wire sa;
wire sb;
wire sc;
wire sd;
wire se;
wire sf;
wire sg;

wire sampler;                             

// assign statements (if any)                          
conv_7seg i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.sa(sa),
	.sb(sb),
	.sc(sc),
	.sd(sd),
	.se(se),
	.sf(sf),
	.sg(sg)
);

// a
initial
begin
	a = 1'b0;
	a = #320000 1'b1;
	a = #320000 1'b0;
	a = #320000 1'b1;
end 

// b
initial
begin
	repeat(3)
	begin
		b = 1'b0;
		b = #160000 1'b1;
		# 160000;
	end
	b = 1'b0;
end 

// c
initial
begin
	repeat(6)
	begin
		c = 1'b0;
		c = #80000 1'b1;
		# 80000;
	end
	c = 1'b0;
end 

// d
initial
begin
	repeat(12)
	begin
		d = 1'b0;
		d = #40000 1'b1;
		# 40000;
	end
	d = 1'b0;
end 

conv_7seg_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.sampler_tx(sampler)
);

conv_7seg_vlg_check_tst tb_out(
	.sa(sa),
	.sb(sb),
	.sc(sc),
	.sd(sd),
	.se(se),
	.sf(sf),
	.sg(sg),
	.sampler_rx(sampler)
);
endmodule

